const jwt = require("jsonwebtoken");
const User = require("../model/userModel");
const { promisify } = require("util");

/**
 * creating a sign token with the id and the secret key and passing expiresIn as an object. which lets us know the validity of the token.
 */
const signToken = (id) =>
  jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });

/** Here, we are creating token with the _id key pair generated by mongoDb.
 * Storing it in cookie and under secure option we are assigning it expiration date.
 * We need to set the password to undefined because we should not show password in the response.
 * */
const createSendToken = (user, statusCode, res) => {
  const token = signToken(user._id);

  const secureOption = {
    expires: new Date(
      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000
    ),
    httpOnly: true,
    // secure: true,
  };

  res.cookie("JWT", token, secureOption);

  user.password = undefined;

  res.status(statusCode).json({
    status: "success",
    token,
    data: {
      user,
    },
  });
};

/**
 * We are signing up the user with all the required fields which have setup in the user model.
 * After creating the user, we are creating the JWT token as well.
 */
exports.signUp = async (req, res, next) => {
  try {
    const newUser = await User.create({
      userName: req.body.userName,
      email: req.body.email,
      password: req.body.password,
      confirmPassword: req.body.confirmPassword,
      phone: req.body.phone,
      address: req.body.address,
    });
    createSendToken(newUser, 201, res);
  } catch (error) {
    console.log(error);
  }
};

/**
 * Here, if the user is trying to login on one condition
 * 1. If he has email and password.
 * 2. We are comparing the password of the user and the password that user has entered if that is correct or not. If not we throw an error.
 * 3. We create a JWT for the logged in user if the above conditions are met.
 */
exports.login = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      console.log("No user or password");
    }

    const user = await User.findOne({ email }).select("+password");

    if (!user) {
      console.log("Incorrect Email or password");
    }

    createSendToken(user, 200, res);
  } catch (error) {
    console.log(error);
    next();
  }
};

/**
 * PURPOSE OF THIS MIDDLEWARE
 * 1. Here, we are checking if the token is present in the headers of postman and in the cookies of the browser. If there is no token then we throw an error.
 * 2. Next step is to verify the token.
 * 3. We are verifying the JWT with the help of the secret stored in the config.env file.
 * 4. Then we find and verify the id of the user which is decoded from decode.
 * 5. Then we assign currentUser to the req.user and res.locals.user
 */

exports.protect = async (req, res, next) => {
  try {
    let token;
    if (
      req.headers.authorization &&
      req.headers.authorization.startsWith("Bearer")
    ) {
      token = req.headers.authorization.split(" ")[1];
    } else if (req.cookies?.JWT) {
      token = req.cookies.JWT;
    }

    if (!token) {
      console.log("You are not logged in. Please login to access", 401);
    }

    const decode = await promisify(jwt.verify)(token, process.env.JWT_SECRET);

    const currentUser = await User.findById(decode.id);

    if (!currentUser) {
      console.log("The User belonging to this token no longer exists!!", 401);
    }

    // We are sending the user object in the req so that it can be used later.
    req.user = currentUser;
    // console.log("Req.user: ", req);

    // res.locals is an object passed to whatever rendering engine your app is using
    res.locals.user = currentUser;
    // console.log("Req.locals.user: ", res.locals);
    // GRANT ACCESS TO PROTECTED ROUTE
    next();
  } catch (error) {
    console.log(error);
    next();
  }
};
